{"version":3,"sources":["Walks/Goals.js","Walks/index.js","App.js","serviceWorker.js","index.js"],"names":["Goals","props","inputField","e","meters","Math","round","target","value","name","setState","localStorage","setItem","walk","date","walks","state","curr","find","push","JSON","stringify","update","fullwalks","walksfull","fromMoment","daysPassed","currentAverage","makeDay","clone","day","momentDay","format","auto","add","dayOfWalk","reverse","map","className","style","fontStyle","onChange","type","pattern","moment","daysthisYear","diff","endGoal","nextProps","i","length","currentKey","key","includes","this","split","pop","parse","getItem","open","React","Component","Walks","goalsOpen","walkedSoFar","walkedInTotalIfKept","totalMeters","youNeed","shouldHaveBeen","percentageTotal","percentageAvr","reached","stillNeed","console","log","Button","onClick","variant","Carousel","controls","Item","Caption","toFixed","ProgressBar","now","App","basename","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.197b2b4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport moment from 'moment';\r\n\r\nclass Goals extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    const fromMoment = moment([2020, 0]);\r\n    const daysthisYear = moment([2021, 0]).diff(fromMoment, 'days');\r\n    const daysPassed = moment().diff(fromMoment, 'days');\r\n\r\n    this.state = {\r\n      endGoal: 3000, \r\n      currentAverage: 2400,\r\n      daysthisYear,\r\n      daysPassed, fromMoment, walks: []\r\n    }\r\n  }\r\n\r\n  inputField = (e) => {\r\n    const meters = Math.round(e.target.value);\r\n\r\n    switch (e.target.name) {\r\n      case 'endGoal':\r\n      case 'currentAverage':\r\n        this.setState({[e.target.name]: meters});\r\n        localStorage.setItem(`walkative.${e.target.name}`, meters);\r\n        break;\r\n      default:\r\n        const date = e.target.name;\r\n        const walk = {date, meters};\r\n        \r\n        const { walks } = this.state;\r\n        const curr = walks.find(({date}) => walk.date === date);\r\n        if (curr) {\r\n          curr.meters = walk.meters;\r\n        } else {\r\n          walks.push(walk);\r\n    \r\n        }\r\n    \r\n        this.setState({walks});\r\n        localStorage.setItem(`walkative.walks`, JSON.stringify(walks));\r\n        break;\r\n    }\r\n    this.props.update();\r\n  }\r\n\r\n  componentDidMount(nextProps) {\r\n    for(var i =0; i < localStorage.length; i++){\r\n      const currentKey = localStorage.key(i);\r\n      if(currentKey.includes('walkative.')) {\r\n        this.setState({[currentKey.split('walkative.').pop()]: JSON.parse(localStorage.getItem(currentKey))});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n fullwalks = () => {\r\n    const walksfull = [];\r\n\r\n    const { fromMoment, daysPassed, currentAverage, walks = [] } = this.state;\r\n    const makeDay = fromMoment.clone();\r\n\r\n    for (let day = 0; day < daysPassed; day++) {\r\n        const momentDay = makeDay.format('Y-MM-DD');\r\n        const curr = walks.find(({date}) => momentDay === date);\r\n        const push = { date: momentDay, meters: curr ? curr.meters : currentAverage, auto: !curr}\r\n        walksfull.push(push);\r\n        makeDay.add(1, 'd');\r\n    }\r\n\r\n    return walksfull;\r\n}\r\n\r\ndayOfWalk = () => {\r\n  const walks = this.fullwalks();\r\n  return walks.reverse().map(walk =>(\r\n    <div className=\"dayofWalk\" style={{fontStyle: walk.auto ? 'italic' : ''}}> \r\n      <span>{walk.date}</span>\r\n      <input name={walk.date} onChange={this.inputField} value={walk.meters} type=\"number\" pattern=\"[0-9]*\" />\r\n    </div>\r\n  ));\r\n}\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className={`goals ${this.props.open ? 'open': ''}`}>\r\n          <div>\r\n            <span>Meters per day</span>\r\n            <input name={'endGoal'} onChange={this.inputField} value={this.state.endGoal} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n          <div>\r\n            <span>Default average</span>\r\n            <input name={'currentAverage'} onChange={this.inputField} value={this.state.currentAverage} type=\"number\" pattern=\"[0-9]*\" />\r\n          </div>\r\n          <hr></hr>\r\n          {this.dayOfWalk()}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Goals;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\n\r\nimport moment from 'moment';\r\nimport \"holderjs\";\r\nimport Goals from './Goals';\r\n\r\nclass Walks extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    const fromMoment = moment([2020, 0]);\r\n    const daysthisYear = moment([2021, 0]).diff(fromMoment, 'days');\r\n    const daysPassed = moment().diff(fromMoment, 'days');\r\n    \r\n    this.state = {\r\n      endGoal: 3000, \r\n      currentAverage: 0,\r\n      daysthisYear,\r\n      daysPassed,\r\n      goalsOpen: false, walks: [], fromMoment\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount(nextProps) {\r\n    this.update();\r\n  }\r\n\r\n  goalsOpen = () => {\r\n    this.setState({ goalsOpen: !this.state.goalsOpen })\r\n  }\r\n\r\n\r\n  fullwalks = () => {\r\n    let walksfull = 0;\r\n\r\n    const { fromMoment, daysPassed, currentAverage, walks = [] } = this.state;\r\n    const makeDay = fromMoment.clone();\r\n    \r\n    for (let day = 0; day < daysPassed; day++) {\r\n\r\n      const momentDay = makeDay.format('Y-MM-DD');\r\n        const curr = walks.find(({date}) => momentDay === date);\r\n        walksfull += curr ? curr.meters : currentAverage;\r\n        makeDay.add(1, 'd');\r\n    }\r\n\r\n    return walksfull;\r\n}\r\n\r\n\r\n  update = () => {\r\n    for(var i =0; i < localStorage.length; i++){\r\n      const currentKey = localStorage.key(i);\r\n      if(currentKey.includes('walkative.')) {\r\n        this.setState({[currentKey.split('walkative.').pop()]: JSON.parse(localStorage.getItem(currentKey))});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const walkedSoFar = this.fullwalks();\r\n    const {daysPassed, endGoal, daysthisYear, goalsOpen} = this.state;\r\n\r\n    const currentAverage = (walkedSoFar / daysPassed);\r\n    const walkedInTotalIfKept = ((currentAverage * (daysthisYear - daysPassed)) + walkedSoFar) / 1000;\r\n    const totalMeters = endGoal * daysthisYear;\r\n    const youNeed = ((totalMeters - walkedSoFar) / (daysthisYear - daysPassed)) / 1000;\r\n    const shouldHaveBeen = endGoal / 1000 * daysPassed;\r\n    const percentageTotal = walkedSoFar / totalMeters * 100;\r\n    const percentageAvr = currentAverage / endGoal * 100;\r\n    const reached = walkedSoFar < shouldHaveBeen;\r\n    const stillNeed = (totalMeters - walkedSoFar) / 1000\r\n\r\n    console.log(totalMeters, walkedSoFar);\r\n    return (\r\n      <>\r\n      <header className=\"walks\">\r\n        Walk Motivator\r\n        <Button onClick={this.goalsOpen} variant=\"success\"> </Button>\r\n        </header>\r\n\r\n        <main>\r\n          <Goals open={goalsOpen} update={this.update}/>\r\n          <Carousel controls=\"false\">\r\n            <Carousel.Item>\r\n              <div className=\"box\">\r\n                <Carousel.Caption>\r\n                  <h2>You have walked <span className={reached && 'notReached'}>{walkedSoFar / 1000} km</span> this year</h2>\r\n                  <h4>The goal is <span>{shouldHaveBeen} km</span></h4>\r\n                  <h2>That would be <span className={reached && 'notReached'}>{walkedInTotalIfKept.toFixed(2)} km</span> in a year</h2>\r\n                  <h4>Walk <span>{totalMeters / 1000} km</span> this year!</h4>\r\n                  <h2>You still need to walk <span  className={stillNeed > 0 && 'notReached'}>{stillNeed.toFixed(2)} km</span> this year</h2>\r\n                  <ProgressBar variant='success' now={percentageTotal} />\r\n                </Carousel.Caption>\r\n              </div>\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <div className=\"box\">\r\n                <Carousel.Caption>\r\n                  <h2>The current average is <span className={reached && 'notReached'}>{(currentAverage / 1000).toFixed(2)} km</span> per day</h2>\r\n                  <h4>The goal is <span>{endGoal / 1000} km</span> per day</h4>\r\n\r\n                  <h2>Want to succeed?</h2>\r\n                  <h4>Start walking <span>{youNeed.toFixed(2)} km</span> every day</h4>\r\n\r\n                  <h2>You are so close!</h2>\r\n                  <ProgressBar variant='success' now={percentageAvr} />\r\n\r\n                </Carousel.Caption>\r\n              </div>\r\n            </Carousel.Item>\r\n          </Carousel>\r\n        </main>\r\n        </>\r\n    );\r\n  }\r\n}\r\nexport default Walks;","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Walks from \"./Walks\";\r\nimport './App.css';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router basename=\"/\">\r\n      <div className=\"App\">\r\n        <Navbar expand=\"lg\" variant=\"dark\">\r\n          <Navbar.Brand href=\"/\">Peters Stuff</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/eggs\">Eggs</Nav.Link>\r\n                    <Nav.Link href=\"/walks\">Walks</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        <Walks />\r\n        <footer></footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}